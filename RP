#!/usr/bin/env python
# coding: utf-8
# RP, a micro Radio Paradise Player
# Relies on python-gstreamer + libnotify for OSD
#
# - Ctrl+C to exit
#
# Author: Anisse Astier <anisse@astier.eu>


# Python 3 compatibility
# XXX: Useless with gstreamer :-(((
from __future__ import print_function
import sys
PYTHON3 = sys.version_info >= (3, 0)
if PYTHON3:
    b = lambda s : str(s, encoding='utf8') # buffer(urlopen, file reading) conversion to strings for parsing
    from urllib.request import urlopen
    # pynotify is for now only compatible with python 2 :-(
    # Implement a stub for python 3
    class pynotify:
        init = lambda s : None
        uninit = lambda : None
        class Notification:
            __init__ = lambda s, s1, s2 : None
            set_timeout = lambda s, i : None
            update = lambda s, s1, s2, s3 : None
            show = close = lambda s : None
else:
    b = lambda s : s
    from urllib2 import urlopen
    import pynotify

import tempfile
import subprocess
import os
import cgi
import posixpath # for URL manipulation
import time

import gobject, glib, pygst
pygst.require("0.10")
import gst

# This should be an abstract base class (abc)
# anyway, using it will fail because self.imgpath is not defined
class CoverFetcher:
    def get_image(self, imgurl):
        # Specially for Radio Paradise:
        # small image is enough for our cache and display purpose.
        if imgurl.find('graphics/covers/m') != -1:
            # we try the small image first, then the provided URL
            urlist = [imgurl.replace('graphics/covers/m', 'graphics/covers/s'), imgurl]
        else:
            urlist = [imgurl]
        # download image in cache
        page = None
        content = None
        for url in urlist:
            try:
                page = urlopen(url)
                content = page.read()
                if len(content) <= 807: #this is hack to skip empty 1x1 GIF files
                    page = content = None
                    continue
            except: # we *really* want to ignore any error here.
                pass
            else: # stop at the first working url
                break
        if page == None or content == None: # no working url :-(
            return None

        try:
            f = open(self.imgpath, 'wb')
            f.write(content)
            f.close()
        except: #whatever happened in file creation/writing, we just don't have any image to show
            return None
        return self.imgpath

class CachedCoverFetcher(CoverFetcher):
    def __init__(self, cachedir):
        self.coverdir = cachedir + '/covers'
        if not os.path.isdir(self.coverdir):
            os.makedirs(self.coverdir) # we expect OSError to be thrown to caller in case of failure

    def get_image(self, imgurl):
        # get basename
        self.imgpath = self.coverdir + '/' + posixpath.basename(imgurl)
        # check if it's in the cache
        if os.path.exists(self.imgpath):
            return self.imgpath

        return CoverFetcher.get_image(self, imgurl)

class TmpCoverFetcher(CoverFetcher):
    def __init__(self):
        tmpfile = tempfile.NamedTemporaryFile(suffix='.jpg', delete=False)
        tmpfile.close()
        self.imgpath = tmpfile.name
    def __del__(self):
        if os.path.exists(self.imgpath):
            os.unlink(self.imgpath)

class Player:
    def __init__(self, playlisturl):
        pynotify.init("RP")
        self.notif = pynotify.Notification("RP", "A micro Radio Paradise player")
        self.notif.set_timeout(3500)

        self.playlist = b(urlopen(playlisturl).read()).split('\n') #TODO: check for errors

        self.player = gst.element_factory_make("playbin2", "player")
        self.bus = self.player.get_bus()
        self.bus.add_signal_watch()
        self.bus.connect("message", self.on_message)
        gobject.threads_init()

        self.cache_dir = os.getcwd() +  '/cache'
        try:
            self.fetcher = CachedCoverFetcher(self.cache_dir)
        except:
            self.fetcher = TmpCoverFetcher()

    def __del__(self):
        self.bus.remove_signal_watch()
        self.notif.close()
        self.notif = None # loose object reference to allow uninit
        pynotify.uninit()

    def _now_playing(self, artist, song, imgurl):
        # Log everything that is played
        log = open(self.cache_dir + '/log', 'a')
        log.write('"%s","%s","%s","%s"\n' %
                (time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime()),
                    imgurl,artist,song))
        log.close()

        if imgurl != None:
            imgpath = self.fetcher.get_image(imgurl)
        else:
            imgpath = None
        self._show_current(artist, song, imgpath)
    #    self.fetcher.cleanup_img(imgpath)

    def _show_current(self, text, subtext, imgfilepath):
        # libnotify "Summary" is allowed to contain HTML markup. Escape HTML chars.
        subtext = cgi.escape(subtext)
        self.notif.update(text, subtext, imgfilepath)
        self.notif.show()

    def on_message(self, bus, message):
        t = message.type
        artist = song = coverurl = None
        update = False
        if t == gst.MESSAGE_ERROR:
            print(message.parse_error())
            self.player.set_state(gst.STATE_NULL)
            self.loop.quit()

        if t == gst.MESSAGE_TAG:
            tags =  message.parse_tag()
            for tag in tags.keys():
                if tag == 'title':
                    artist,song = tags[tag].split(" - ", 1)
                    update = True
                elif tag == 'homepage':
                    coverurl = tags[tag]
                    update = True
        if update == True:
            print("%s - %s"%(artist,song))
            self._now_playing(artist, song, coverurl)

    def play(self):
        for url in self.playlist:
            self.player.set_property("uri", url)
            self.player.set_state(gst.STATE_PLAYING)

            #XXX: Start a main loop for each try. UGLY !
            self.loop = glib.MainLoop()
            try:
                self.loop.run()
            except KeyboardInterrupt:
                print("\n")
                sys.exit(0)



#TODO:
# - keep playlist in a cache (then randomize order for load-balancing)
# - Add a setup.py to allow installation and python packaging
# - Put cache in a "real" cache directory (e.g /var/cache/)


def main():
    player = Player("http://www.radioparadise.com/musiclinks/rp_128aac.m3u")
    player.play()

if __name__ == '__main__':
    main()
